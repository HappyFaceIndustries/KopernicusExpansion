//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KopernicusExpansion.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Shaders {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Shaders() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("KopernicusExpansion.Resources.Shaders", typeof(Shaders).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Compiled shader for all platforms, uncompressed size: 284.7KB
        ///
        ///Shader &quot;CometTail&quot; {
        ///Properties {
        /// _TintColor (&quot;Color&quot;, Color) = (0.5,0.5,0.5,1)
        /// _Evolution (&quot;Time&quot;, Float) = 0
        /// _RimPower (&quot;Rim Power&quot;, Range(0,4)) = 0.01
        /// _Distortion (&quot;Distortion&quot;, Range(0,0.5)) = 0.2
        /// _ZDistortion (&quot;Z Distortion&quot;, Range(0,1)) = 0.1
        /// _AlphaDistortion (&quot;Alpha Distortion&quot;, Range(0,1)) = 0.2
        /// _VertexDistortion (&quot;Vertex Distortion&quot;, Float) = 0.2
        /// _Frequency (&quot;Frequency&quot;, Float) = 1
        /// _Lacunarity (&quot;Lacunarity&quot;, Floa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CometTail {
            get {
                return ResourceManager.GetString("CometTail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Compiled shader for all platforms, uncompressed size: 185.6KB
        ///
        ///Shader &quot;Debug/Cave&quot; {
        ///Properties {
        /// _TintColor (&quot;Color&quot;, Color) = (1,1,1,1)
        ///}
        ///SubShader { 
        /// LOD 2000
        /// Tags { &quot;RenderType&quot;=&quot;Transparent&quot; }
        ///
        ///
        /// // Stats for Vertex shader:
        /// //       d3d11 : 18 avg math (5..43)
        /// //    d3d11_9x : 18 avg math (5..43)
        /// //        d3d9 : 23 avg math (5..56)
        /// //      opengl : 23 avg math (5..56)
        /// // Stats for Fragment shader:
        /// //       d3d11 : 4 avg math (3..6), 0 avg texture (0..1)
        /// //    d3d11_9x :  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DebugCave {
            get {
                return ResourceManager.GetString("DebugCave", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Compiled shader for all platforms, uncompressed size: 185.4KB
        ///
        ///Shader &quot;EmissiveQuad&quot; {
        ///Properties {
        /// _Color (&quot;Color&quot;, Color) = (1,1,1,1)
        /// _EmissiveMap (&quot;Map&quot;, 2D) = &quot;white&quot; {}
        /// _Brightness (&quot;Brightness&quot;, Float) = 1.5
        /// _Transparency (&quot;Transparency&quot;, Float) = 0.35
        ///}
        ///SubShader { 
        /// LOD 250
        /// Tags { &quot;QUEUE&quot;=&quot;Transparent&quot; &quot;RenderType&quot;=&quot;Transparent&quot; }
        ///
        ///
        /// // Stats for Vertex shader:
        /// //       d3d11 : 19 avg math (6..44)
        /// //    d3d11_9x : 19 avg math (6..44)
        /// //        d3d9 : 24 avg math (6..57)
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EmissiveQuad {
            get {
                return ResourceManager.GetString("EmissiveQuad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Compiled shader for all platforms, uncompressed size: 185.4KB
        ///
        ///Shader &quot;EmissiveScaled&quot; {
        ///Properties {
        /// _Color (&quot;Color&quot;, Color) = (1,1,1,1)
        /// _EmissiveMap (&quot;Map&quot;, 2D) = &quot;white&quot; {}
        /// _Brightness (&quot;Brightness&quot;, Float) = 1.25
        /// _Transparency (&quot;Transparency&quot;, Float) = 0.75
        ///}
        ///SubShader { 
        /// LOD 250
        /// Tags { &quot;QUEUE&quot;=&quot;Transparent&quot; &quot;RenderType&quot;=&quot;Transparent&quot; }
        ///
        ///
        /// // Stats for Vertex shader:
        /// //       d3d11 : 19 avg math (6..44)
        /// //    d3d11_9x : 19 avg math (6..44)
        /// //        d3d9 : 24 avg math (6..57 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EmissiveScaled {
            get {
                return ResourceManager.GetString("EmissiveScaled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Compiled shader for all platforms, uncompressed size: 214.3KB
        ///
        ///Shader &quot;Footprint&quot; {
        ///Properties {
        /// _MainTex (&quot;Base (RGB)&quot;, 2D) = &quot;white&quot; {}
        /// _Opacity (&quot;Opacity&quot;, Range(0,1)) = 1
        ///}
        ///SubShader { 
        /// LOD 200
        /// Tags { &quot;RenderType&quot;=&quot;Transparent&quot; }
        ///
        ///
        /// // Stats for Vertex shader:
        /// //       d3d11 : 19 avg math (6..44)
        /// //    d3d11_9x : 19 avg math (6..44)
        /// //        d3d9 : 24 avg math (6..57)
        /// //      opengl : 24 avg math (6..57)
        /// // Stats for Fragment shader:
        /// //       d3d11 : 5 avg math (4..7), 1  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Footprint {
            get {
                return ResourceManager.GetString("Footprint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Compiled shader for all platforms, uncompressed size: 455.5KB
        ///
        ///Shader &quot;ProceduralGasGiant&quot; {
        ///Properties {
        /// _MainTex (&quot;Ramp Texture&quot;, 2D) = &quot;white&quot; {}
        /// _Evolution (&quot;Time&quot;, Float) = 0
        /// _StormMap (&quot;Storm Map&quot;, 2D) = &quot;white&quot; {}
        /// _StormFrequency (&quot;Storm Frequency&quot;, Float) = 5
        /// _StormDistortion (&quot;Storm Distortion&quot;, Float) = 0.85
        /// _Distortion (&quot;Distortion&quot;, Range(0,0.05)) = 0.02
        /// _MainFrequency (&quot;Frequency&quot;, Float) = 25
        /// _Lacunarity (&quot;Lacunarity&quot;, Float) = 1.3
        /// _Gain (&quot;Gain&quot;, Float) = 0.9
        /// _PermTab [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ProceduralGasGiant {
            get {
                return ResourceManager.GetString("ProceduralGasGiant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Compiled shader for all platforms, uncompressed size: 21.7KB
        ///
        ///Shader &quot;RefractiveAtmosphere&quot; {
        ///Properties {
        /// _BumpAmt (&quot;Distortion&quot;, Range(0,128)) = 10
        /// _MainTex (&quot;Tint Color (RGB)&quot;, 2D) = &quot;white&quot; {}
        /// _BumpMap (&quot;Normalmap&quot;, 2D) = &quot;bump&quot; {}
        /// _BumpMapOffset (&quot;Offset&quot;, Vector) = (0,0,0,0)
        ///}
        ///SubShader { 
        /// Tags { &quot;QUEUE&quot;=&quot;Transparent+100&quot; &quot;RenderType&quot;=&quot;Opaque&quot; }
        /// GrabPass {
        ///  Name &quot;BASE&quot;
        ///  Tags { &quot;LIGHTMODE&quot;=&quot;Always&quot; }
        /// }
        ///
        ///
        /// // Stats for Vertex shader:
        /// //       d3d11 : 10 math
        /// //    d3d11_ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string RefractiveAtmosphere {
            get {
                return ResourceManager.GetString("RefractiveAtmosphere", resourceCulture);
            }
        }
    }
}
